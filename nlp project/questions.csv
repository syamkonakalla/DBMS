,code
0,"void swap(CArray *array, int position1, int position2);
CArray *getCArray(int size)
{
    CArray *array = (CArray *)malloc(sizeof(CArray));
    array->array = (int *)malloc(sizeof(int) * size);
    array->size = size;
    int i;
    for (i = 0; i < size; i++)
    {
        array->array[i] = 0;
    }
    return array;
}"
1,"int insertValueCArray(CArray *array, int position, int value)
{
    if (position >= 0 && position < array->size)
    {
        if (array->array[position] == 0)
        {
            array->array[position] = value;
            return SUCCESS;
        }
        else
            return POSITION_INIT;
    }
    return INVALID_POSITION;
}"
2,"int removeValueCArray(CArray *array, int position)
{
    if (position >= 0 && position < array->size)
    {
        if (array->array[position] != 0)
        {
            array->array[position] = 0;
        }
        else
            return POSITION_EMPTY;
    }
    return INVALID_POSITION;
}"
3,"int pushValueCArray(CArray *array, int value)
{
    int i;
    int ok = 0;
    for (i = 0; i < array->size; i++)
    {
        if (array->array[i] == 0)
        {
            array->array[i] = value;
            ok = 1;
            break;
        }
    }
    if (ok == 1)
        return SUCCESS;
    else
        return ARRAY_FULL;
}"
4,"int updateValueCArray(CArray *array, int position, int value)
{
    if (position >= 0 && position < array->size)
    {
        if (array->array[position] != 0)
        {
        }

        else
            return POSITION_NOT_INIT;
    }
    return INVALID_POSITION;
}"
5,"int eraseCArray(CArray *array)
{
    int i;
    for (i = 0; i < array->size; i++)
    {
        array->array[i] = 0;
    }
    return 0;
}"
6,"int switchValuesCArray(CArray *array, int position1, int position2)
{
    if (position1 >= 0 && position1 < array->size && position2 >= 0 &&
        position2 < array->size)
    {
        int temp = array->array[position1];
        array->array[position1] = array->array[position2];
        array->array[position2] = temp;
    }
    return INVALID_POSITION;
}"
7,"int reverseCArray(CArray *array)
{
    int i;
    for (i = 0; i < array->size / 2; i++)
    {
        swap(array, i, array->size - i - 1);
    }
    return SUCCESS;
}"
8,"int displayCArray(CArray *array)
{
    int i;
    printf(""
C ARRAY
"");
    for (i = 0; i < array->size; i++)
    {
        printf(""%d "", array->array[i]);
    }
    printf(""
"");
    return 0;
}"
9,"int blenderCArray(CArray *array)
{
    srand(time(NULL) * array->size);
    int i;
    int total = array->size * 100;
    for (i = 0; i < total; i++)
    {
        swap(array, rand() % array->size, rand() % array->size);
    }
    return 0;
}"
10,"CArray *getCopyCArray(CArray *arr)
{
    CArray *array = (CArray *)malloc(sizeof(CArray));
    array->array = (int *)malloc(sizeof(int) * arr->size);
    array->size = arr->size;
    int i;
    for (i = 0; i < arr->size; i++)
    {
        array->array[i] = arr->array[i];
    }
    return array;
}"
11,"void swap(CArray *array, int position1, int position2)
{
    int temp = array->array[position1];
    array->array[position1] = array->array[position2];
    array->array[position2] = temp;
}"
12,"int bubbleSortCArray(CArray *array)
{
    int i, j;
    for (i = 0; i < array->size - 1; i++)
    {
        for (j = 0; j < array->size - i - 1; j++)
        {
            if (array->array[j] > array->array[j + 1])
            {
                swap(array, j, j + 1);
            }
        }
    }
    return 0;
}"
13,"int selectionSortCArray(CArray *array)
{
    int i, j, min;
    for (i = 0; i < array->size - 1; i++)
    {
        min = i;
        for (j = i + 1; j < array->size; j++)
            if (array->array[j] < array->array[min])
                min = j;
        swap(array, min, i);
    }
    return 0;
}"
14,"int insertionSortCArray(CArray *array)
{
    int i, j, num;
    for (i = 1; i < array->size; i++)
    {
        num = array->array[i];
        j = i - 1;
        while (j >= 0 && array->array[j] > num)
        {
            array->array[j + 1] = array->array[j];
            j--;
        }
        array->array[j + 1] = num;
    }
    return 0;
}"
15,"int valueOcurranceCArray(CArray *array, int value)
{
    int i, total = 0;
    for (i = 0; i < array->size; i++)
    {
        if (array->array[i] == value)
            total++;
    }
    return total;
}"
16,"CArray *valuePositionsCArray(CArray *array, int value)
{
    int i, j = 0;
    int total = valueOcurranceCArray(array, value);
    CArray *resultArray = getCArray(total);
    for (i = 0; i < array->size; i++)
    {
        if (array->array[i] == value)
        {
                        resultArray->array[j] = i;
            j++;
        }
    }
    return resultArray;
}"
17,"int findMinCArray(CArray *array)
{
    int i;
    int min = array->array[0];
    for (i = 1; i < array->size; i++)
    {
        if (array->array[i] < min)
        {
            min = array->array[i];
        }
    }
    return min;
}"
18,"int findMaxCArray(CArray *array)
{
    int i;
    int max = array->array[0];
    for (i = 1; i < array->size; i++)
    {
        if (array->array[i] > max)
        {
            max = array->array[i];
        }
    }
    return max;
}
"
19,"#include <stdio.h>  
  
void  main()  
{  
    int arr[10]; 
    int i;  
       printf(""

Read and Print elements of an array:
"");
       printf(""-----------------------------------------
"");	
  
    printf(""Input 10 elements in the array :
"");  
    for(i=0; i<10; i++)  
    {  
    printf(""element - %d : "",i);
        scanf(""%d"", &arr[i]);  
    }  
  
    printf(""
Elements in array are: "");  
    for(i=0; i<10; i++)  
    {  
        printf(""%d  "", arr[i]);  
    } 
    printf(""
"");	
}
"
20,"#include <stdio.h>

void main()
{
   int i,n,a[100];
   
       printf(""

Read n number of values in an array and display it in reverse order:
"");
       printf(""------------------------------------------------------------------------
"");
   
   printf(""Input the number of elements to store in the array :"");
   scanf(""%d"",&n);
   
   printf(""Input %d number of elements in the array :
"",n);
   for(i=0;i<n;i++)
      {
	  printf(""element - %d : "",i);
	  scanf(""%d"",&a[i]);
	  }
      
   printf(""
The values store into the array are : 
"");
   for(i=0;i<n;i++)
     {
	   printf(""% 5d"",a[i]);
	 }
 
   printf(""

The values store into the array in reverse are :
"");
   for(i=n-1;i>=0;i--)
      {
	   printf(""% 5d"",a[i]);
	  }
   printf(""

"");
} 
"
21,"#include<stdio.h>

int main()
{
    struct emp
    {
        char name[25];
        int age;
        float bs;
    };
    struct emp e;
    e.name = ""Suresh"";
    e.age = 25;
    printf(""%s %d
"", e.name, e.age);
    return 0;
}"
22,"#include<stdio.h>

int main()
{
    printf(""%d %d
"", 32<<1, 32<<0);
    printf(""%d %d
"", 32<<-1, 32<<-0);
    printf(""%d %d
"", 32>>1, 32>>0);
    printf(""%d %d
"", 32>>-1, 32>>-0);
    return 0;"
23,"#include<stdio.h>

int main()
{
    char c=48;
    int i, mask=01;
    for(i=1; i<=5; i++)
    {
        printf(""%c"", c|mask);
        mask = mask<<1;
    }
    return 0;
}"
24,"#include<stdio.h>
int main()
{
    char str[]=""C-program"";
    int a = 5;
    printf(a >10?""Ps
"":""%s
"", str);
    return 0;
}"
25,"#include<stdio.h>
#include<stdlib.h>

union employee
{
    char name[15];
    int age;
    float salary;
};
const union employee e1;

int main()
{
    strcpy(e1.name, ""K"");
    printf(""%s"", e1.name);    
    e1.age=85;
    printf(""%d"", e1.age);
    printf(""%f"", e1.salary);
    return 0;
}"
26,"#include<stdio.h>

int fun(int *f)
{
    *f = 10;
    return 0;
}
int main()
{
    const int arr[5] = {1, 2, 3, 4, 5};
    printf(""Before modification arr[3] = %d"", arr[3]);
    fun(&arr[3]);
    printf(""
After modification arr[3] = %d"", arr[3]);
    return 0;
}"
27,"int main(int ac, char *av[])
{
}"
28,"#include<stdio.h>
int main()
{
    int k, num=30;
    k = (num>5 ? (num <=10 ? 100 : 200): 500);
    printf(""%d
"", num);
    return 0;
}"
29,"#include<stdio.h>

int main()
{
    struct value
    {
        int bit1:1;
        int bit3:4;
        int bit4:4;
    }bit;
    printf(""%d
"", sizeof(bit));
    return 0;
}"
30,"#include<stdio.h>
#include<string.h>

int main()
{
    printf(""%d
"", strlen(""123456""));
    return 0;
}"
31,"#include<stdio.h>

int main()
{
    int i, a[] = {2, 4, 6, 8, 10};
    change(a, 5);
    for(i=0; i<=4; i++)
        printf(""%d, "", a[i]);
    return 0;
}
void change(int *b, int n)
{
    int i;
    for(i=0; i<n; i++)
        *(b+1) = *(b+i)+5;
}"
32,"int main()
{
    char str[5] = ""IndiaBIX"";
    return 0;
}"
33,"#include<stdio.h>
int check (int, int);

int main()
{
    int c;
    c = check(10, 20);
    printf(""c=%d
"", c);
    return 0;
}
int check(int i, int j)
{
    int *p, *q;
    p=&i;
    q=&j;
    i>=45 ? return(*p): return(*q);
}"
34,"#include<stdio.h>
int main()
{
    int a[5] = {2, 3};
    printf(""%d, %d, %d
"", a[2], a[3], a[4]);
    return 0;
}"
35,"#include<stdio.h>
int main()
{
    extern int i;
    i = 20;
    printf(""%d
"", sizeof(i));
    return 0;
}"
36,"#include<stdio.h>
int main()
{
    int j=1;
    while(j <= 255)
    {
        printf(""%c %d
"", j, j);
        j++;
    }
    return 0;
}"
37,"#include<stdio.h>
int main()
{
    int a = 5;
    switch(a)
    {
    case 1:
    printf(""First"");

    case 2:
    printf(""Second"");

    case 3 + 2:
    printf(""Third"");

    case 5:
    printf(""Final"");
    break;

    }
    return 0;
}"
38,"#include<stdio.h>
int main()
{
    int P = 10;
    switch(P)
    {
       case 10:
       printf(""Case 1"");

       case 20:
       printf(""Case 2"");
       break;

       case P:
       printf(""Case 2"");
       break;
    }
    return 0;
}"
39,"#include<stdio.h>
int main()
{
    int i=2;
    printf(""%d, %d
"", ++i, ++i);
    return 0;
}"
40," int f(int a, float b)
    {
        /* Some code */
    }
    int f(a, b)
    int a; float b;
    {
        /* Some code */
    }
"
41,"#include<stdio.h>
#define SQR(x)(x*x)

int main()
{
    int a, b=3;
    a = SQR(b+2);
    printf(""%d
"", a);
    return 0;
}"
42,"#include<stdio.h>

int main()
{
    char *p;
    p=""hello"";
    printf(""%s
"", *&*&p);
    return 0;
}"
43,"#include<stdio.h>

int main()
{
    FILE *fs, *ft, *fp;
    fp = fopen(""A.C"", ""r"");
    fs = fopen(""B.C"", ""r"");
    ft = fopen(""C.C"", ""r"");
    fclose(fp, fs, ft);
    return 0;
}"
44,"#include<stdio.h>

int main()
{
    FILE *fs, *ft;
    char c[10];
    fs = fopen(""source.txt"", ""r"");
    c[0] = getc(fs);
    fseek(fs, 0, SEEK_END);
    fseek(fs, -3L, SEEK_CUR);
    fgets(c, 5, fs);
    puts(c);
    return 0;
}"
45,"/* myprog.c */
#include<stdio.h>
#include<stdlib.h>

int main(int argc, char **argv)
{
    printf(""%s
"", *++argv);
    return 0;
}"
46,"#include<stdio.h>
#include<stdlib.h>

int main()
{
    int *p, i, j;
    /* Add statement here */
    for(i=0; i<3; i++)
    {
        for(j=0; j<4; j++)
        {
            p[i*4+j] = i;
            printf(""%d"", p[i*4+j]);
        }
    }
    return 0;
}"
47,"#include<stdio.h>
#include<stdarg.h>
void display(char *s, ...);
int fun1();
int fun2();

int main()
{
    int (*p1)();
    int (*p2)();
    p1 = fun1;
    p2 = fun2;
    display(""IndiaBIX"", p1, p2);
    return 0;
}
void display(char *s, ...)
{
    int (*pp1)();
    int (*pp2)();
    va_list ptr;

    va_start(ptr, s);
    pp1 = va_arg(ptr, int(*)());
    (*pp1)();

    pp2 = va_arg(ptr, int(*)());
    (*pp2)();

}
int fun1()
{
    printf(""Hello"");
}
int fun2()
{
    printf(""Hi"");
}"
48,int (*ptr)[30];
49,"#include<stdio.h> // C header file for standard input and output
int a = 0 ; // initilaizing and declaring the integer a to value 0.
int main ()  // main class
{
if ( a == 0 )  //  This condition will be true
{
printf ( "" a = 0  
 "" ) ;
}
else                        // Else part will be optimized
{
printf ( "" a ! = 0  
 "" ) ;
}
return 0 ; // returning value
}"
50,"#include<stdio.h>
volatile int a ;    /* volatile Keyword used before declaration of integer variable a */
int main() // main class
{
a = 0 ;   // initializing the integer value to 0
if (a == 0)  // applying if condition
{
printf ( "" a = 0 
 "" ) ;
}
else// Now compiler never optimize else part because the variable is declared as volatile
{
printf ( "" a ! = 0  
 "" ) ;
}
return 0 ;
}"
51,"#include <stdio.h>
int main (void)                 // main class declaration in the code
{
const volatile int local_value = 25 ; // declaring constant volatile integer variable with assigned value
int *ptr = ( int* ) &local_value ;
printf ( "" The initial value of the local_value is  : %d 
 "", local_value ) ;
*ptr = 195 ;  // value to the pointer
printf ( "" The modified value of the local_value is: %d 
 "", local_value ) ;
return 0 ;
}"
52,"#include <stdio.h>

int function()
{
    auto int a = 1;
    printf(""%d"", a);
}

int main() 
{
    function();
	return 0;
}
"
53,"#include <stdio.h>

int function()
{    
    auto int a = 1;
    printf(""%d
"", a);
    
    int opengenus_function()
    {
        int b = 2;
        printf(""%d"", b);
    }
    
    opengenus_function();
}

int main() 
{
    function();
	return 0;
}"
54,"#include <stdio.h>
int main() {
   register char x = 'S';
   register int a = 10;
   auto int b = 8;
   printf(""The value of register variable b : %c
"",x);
   printf(""The sum of auto and register variable : %d"",(a+b));
   return 0;
}"
